/**********************************************************************************/
/*                                                                                */
/*                                                                               */
/*  DATE              :September 12, 2013                                         */
/*  Project name      :SmartNav                                                      */
/*  FileName          :		*/
/*  CPU GROUP         :25                                                        */
/*  Designer Engg     : Nithin.P               
/*                                                                                */
/*  This file is generated by Renesas Project Generator (Ver.4.18).      		  */
/*                                     											  */
/**********************************************************************************/



#ifndef   	__ads7843_h
#define  	__ads7843_h_

#include "bsp/BSP.h"


#define ADS7846E_S				0x80	    // Start bit, always 1
#define ADS7846E_8BIT			0x08	    // 0 = 12-bit conversion, 1 = 8-bits
#define ADS7846E_SER			0x04	    // 0 = Differential, 1 = Single ended

//
// Address select defines for single ended mode (or'ed with the single ended select bit)
//
#define ADS7846E_ADD_SER_TEMP0	(ADS7846E_SER | (0x0 << 4))	// temperature measurement 1
#define ADS7846E_ADD_SER_Y		(ADS7846E_SER | (0x1 << 4))	// Y position measurement
#define ADS7846E_ADD_SER_BAT	(ADS7846E_SER | (0x2 << 4))	// battery input measurement
#define ADS7846E_ADD_SER_Z1		(ADS7846E_SER | (0x3 << 4))	// pressure measurement 1
#define ADS7846E_ADD_SER_Z2		(ADS7846E_SER | (0x4 << 4))	// pressure measurement 2
#define ADS7846E_ADD_SER_X		(ADS7846E_SER | (0x5 << 4))	// X position measurement
#define ADS7846E_ADD_SER_AUX	(ADS7846E_SER | (0x6 << 4))	// auxillary input measurement
#define ADS7846E_ADD_SER_TEMP1	(ADS7846E_SER | (0x7 << 4))	// temperature measurement 2

//
// Address select defines for differential mode
//
#define ADS7846E_ADD_DFR_Y		(0x1 << 4)	// Y position measurement
#define ADS7846E_ADD_DFR_Z1		(0x3 << 4)	// pressure measurement 1
#define ADS7846E_ADD_DFR_Z2		(0x4 << 4)	// pressure measurement 2
#define ADS7846E_ADD_DFR_X		(0x5 << 4)	// X position measurement

//
// Power Down Modes
//
#define ADS7846E_PD_LPWR		0x0			// low-power mode, no power-up delay, *IRQ is enabled
#define ADS7846E_PD_REF			0x1			// 2.5V reference off, ADC on, requires delay before conversion
#define ADS7846E_PD_ADC			0x2			// ADC off, REF on, no delay required
#define ADS7846E_PD_IRQ			0x3			// device on, but *IRQ is disabled


#define BIT_DELAY 4000

#define DIN_0        DIN=0		//R_IO_PORT_Write(PDL_IO_PORT_E_2,0)
#define DIN_1        DIN=1		//R_IO_PORT_Write(PDL_IO_PORT_E_2,1)//A4

#define DCLK_0       DCLK=0		//(PDL_IO_PORT_E_0,0)
#define DCLK_1       DCLK=1		//R_IO_PORT_Write(PDL_IO_PORT_E_0,1)//a2

#define CS_0         CS=0 		//R_IO_PORT_Write(PDL_IO_PORT_E_1,0)
#define CS_1         CS=1		//R_IO_PORT_Write(PDL_IO_PORT_E_1,0)


typedef struct xEvent* EventPointer;


void WriteADS7843(unsigned char Data);
unsigned int ReadADS7843(void);
void Convert_To_Pixel(unsigned int X, unsigned int Y);
void Calibrate(int *a,int *b);
void Read_Position_ADS7843(void);
void Init_ADS7843(void);
unsigned int  ReadFromCharFrom7843();
void WriteCharTo7843(unsigned char num)   ;
void start() ;
extern EventPointer getPos(void);




#endif